// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Logger = Logger || {};

/**
 * @constructor
 */
Logger.Packet = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Logger.Packet}
 */
Logger.Packet.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Logger.Packet=} obj
 * @returns {Logger.Packet}
 */
Logger.Packet.getRootAsPacket = function(bb, obj) {
  return (obj || new Logger.Packet).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Logger.Packet=} obj
 * @returns {Logger.Packet}
 */
Logger.Packet.getSizePrefixedRootAsPacket = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Logger.Packet).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
Logger.Packet.prototype.code = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Logger.Packet.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
Logger.Packet.prototype.version = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns {boolean}
 */
Logger.Packet.prototype.fake = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {number} index
 * @returns {number}
 */
Logger.Packet.prototype.data = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
Logger.Packet.prototype.dataLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
Logger.Packet.prototype.dataArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns {flatbuffers.Long}
 */
Logger.Packet.prototype.timestamp = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
Logger.Packet.startPacket = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} code
 */
Logger.Packet.addCode = function(builder, code) {
  builder.addFieldInt16(0, code, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
Logger.Packet.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} version
 */
Logger.Packet.addVersion = function(builder, version) {
  builder.addFieldInt16(2, version, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} fake
 */
Logger.Packet.addFake = function(builder, fake) {
  builder.addFieldInt8(3, +fake, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
Logger.Packet.addData = function(builder, dataOffset) {
  builder.addFieldOffset(4, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
Logger.Packet.createDataVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Logger.Packet.startDataVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} timestamp
 */
Logger.Packet.addTimestamp = function(builder, timestamp) {
  builder.addFieldInt64(5, timestamp, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Logger.Packet.endPacket = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} code
 * @param {flatbuffers.Offset} nameOffset
 * @param {number} version
 * @param {boolean} fake
 * @param {flatbuffers.Offset} dataOffset
 * @param {flatbuffers.Long} timestamp
 * @returns {flatbuffers.Offset}
 */
Logger.Packet.createPacket = function(builder, code, nameOffset, version, fake, dataOffset, timestamp) {
  Logger.Packet.startPacket(builder);
  Logger.Packet.addCode(builder, code);
  Logger.Packet.addName(builder, nameOffset);
  Logger.Packet.addVersion(builder, version);
  Logger.Packet.addFake(builder, fake);
  Logger.Packet.addData(builder, dataOffset);
  Logger.Packet.addTimestamp(builder, timestamp);
  return Logger.Packet.endPacket(builder);
}

/**
 * @constructor
 */
Logger.PacketLog = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Logger.PacketLog}
 */
Logger.PacketLog.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Logger.PacketLog=} obj
 * @returns {Logger.PacketLog}
 */
Logger.PacketLog.getRootAsPacketLog = function(bb, obj) {
  return (obj || new Logger.PacketLog).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Logger.PacketLog=} obj
 * @returns {Logger.PacketLog}
 */
Logger.PacketLog.getSizePrefixedRootAsPacketLog = function(bb, obj) {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Logger.PacketLog).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {Logger.Packet=} obj
 * @returns {Logger.Packet}
 */
Logger.PacketLog.prototype.buffer = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new Logger.Packet).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Logger.PacketLog.prototype.bufferLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Logger.PacketLog.startPacketLog = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bufferOffset
 */
Logger.PacketLog.addBuffer = function(builder, bufferOffset) {
  builder.addFieldOffset(0, bufferOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Logger.PacketLog.createBufferVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Logger.PacketLog.startBufferVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Logger.PacketLog.endPacketLog = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Logger.PacketLog.finishPacketLogBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Logger.PacketLog.finishSizePrefixedPacketLogBuffer = function(builder, offset) {
  builder.finish(offset, undefined, true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bufferOffset
 * @returns {flatbuffers.Offset}
 */
Logger.PacketLog.createPacketLog = function(builder, bufferOffset) {
  Logger.PacketLog.startPacketLog(builder);
  Logger.PacketLog.addBuffer(builder, bufferOffset);
  return Logger.PacketLog.endPacketLog(builder);
}

// Exports for Node.js and RequireJS
this.Logger = Logger;
